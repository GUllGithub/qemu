commit fd559a2d368118b387657ac30bccf79e79da2dc8
Author: Miroslav Rezanina <mrezanin@redhat.com>
Date:   Mon Mar 4 10:42:59 2013 +0100

    char: Equip the unix/tcp backend to handle nonblocking writes
    
    Message-Id: <26139c9fd71229699c6d59c31631a539ac3830fd.1354903384.git.crobinso@redhat.com>
    
    Now that the infrastructure is in place to return -EAGAIN to callers,
    individual char drivers can set their update_fd_handlers() function to
    set or remove an fd's write handler.  This handler checks if the driver
    became writable.
    
    A generic callback routine is used for unblocking writes and letting
    users of chardevs know that a driver became writable again.
    
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Cole Robinson <crobinso@redhat.com>

diff --git a/qemu-char.c b/qemu-char.c
index 3d6e2f8..a5cdc9d 100644
--- a/qemu-char.c
+++ b/qemu-char.c
@@ -105,6 +105,19 @@
 static QTAILQ_HEAD(CharDriverStateHead, CharDriverState) chardevs =
     QTAILQ_HEAD_INITIALIZER(chardevs);
 
+/*
+ * Generic routine that gets called when chardev becomes writable.
+ * Lets chardev user know it's OK to send more data.
+ */
+static void char_write_unblocked(void *opaque)
+{
+    CharDriverState *chr = opaque;
+
+    chr->write_blocked = false;
+    chr->chr_disable_write_fd_handler(chr);
+    chr->chr_write_unblocked(chr->handler_opaque);
+}
+
 void qemu_chr_be_event(CharDriverState *s, int event)
 {
     /* Keep track if the char device is open */
@@ -2517,6 +2530,25 @@ static void tcp_chr_close(CharDriverState *chr)
     qemu_chr_be_event(chr, CHR_EVENT_CLOSED);
 }
 
+static void tcp_enable_write_fd_handler(CharDriverState *chr)
+{
+    TCPCharDriver *s = chr->opaque;
+
+    /*
+     * This function is called only after tcp_chr_connect() is called
+     * (either in 'server' mode or client mode.  So we're sure of
+     * s->fd being initialised.
+     */
+    enable_write_fd_handler(s->fd, char_write_unblocked);
+}
+
+static void tcp_disable_write_fd_handler(CharDriverState *chr)
+{
+    TCPCharDriver *s = chr->opaque;
+
+    disable_write_fd_handler(s->fd);
+}
+
 static CharDriverState *qemu_chr_open_socket_fd(int fd, bool do_nodelay,
                                                 bool is_listen, bool is_telnet,
                                                 bool is_waitconnect,
@@ -2573,6 +2605,8 @@ static CharDriverState *qemu_chr_open_socket_fd(int fd, bool do_nodelay,
     chr->chr_close = tcp_chr_close;
     chr->get_msgfd = tcp_get_msgfd;
     chr->chr_add_client = tcp_chr_add_client;
+    chr->chr_enable_write_fd_handler = tcp_enable_write_fd_handler;
+    chr->chr_disable_write_fd_handler = tcp_disable_write_fd_handler;
 
     if (is_listen) {
         s->listen_fd = fd;
