commit b450c5e63c0a49d370d2cf9bb8e07021bfe001fd
Author: Miroslav Rezanina <mrezanin@redhat.com>
Date:   Mon Mar 4 09:07:28 2013 +0100

    iohandlers: Add enable/disable_write_fd_handler() functions
    
    Message-Id: <448ba28f493820e91b65986901165cb28ff5fd78.1354903384.git.crobinso@redhat.com>
    
    These will be used to provide a cleaner API for the nonblocking case.
    
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Cole Robinson <crobinso@redhat.com>

diff --git a/include/qemu/main-loop.h b/include/qemu/main-loop.h
index e8059c3..faaf47d 100644
--- a/include/qemu/main-loop.h
+++ b/include/qemu/main-loop.h
@@ -166,6 +166,9 @@ void qemu_del_wait_object(HANDLE handle, WaitObjectFunc *func, void *opaque);
 typedef void IOReadHandler(void *opaque, const uint8_t *buf, int size);
 typedef int IOCanReadHandler(void *opaque);
 
+void enable_write_fd_handler(int fd, IOHandler *fd_write);
+void disable_write_fd_handler(int fd);
+
 /**
  * qemu_set_fd_handler2: Register a file descriptor with the main loop
  *
diff --git a/iohandler.c b/iohandler.c
index 2523adc..a49cfd4 100644
--- a/iohandler.c
+++ b/iohandler.c
@@ -45,6 +45,41 @@ typedef struct IOHandlerRecord {
 static QLIST_HEAD(, IOHandlerRecord) io_handlers =
     QLIST_HEAD_INITIALIZER(io_handlers);
 
+static IOHandlerRecord *find_iohandler(int fd)
+{
+    IOHandlerRecord *ioh;
+
+    QLIST_FOREACH(ioh, &io_handlers, next) {
+        if (ioh->fd == fd) {
+            return ioh;
+        }
+    }
+    return NULL;
+}
+
+void enable_write_fd_handler(int fd, IOHandler *fd_write)
+{
+    IOHandlerRecord *ioh;
+
+    ioh = find_iohandler(fd);
+    if (!ioh) {
+        return;
+    }
+
+    ioh->fd_write = fd_write;
+}
+
+void disable_write_fd_handler(int fd)
+{
+    IOHandlerRecord *ioh;
+
+    ioh = find_iohandler(fd);
+    if (!ioh) {
+        return;
+    }
+
+    ioh->fd_write = NULL;
+}
 
 /* XXX: fd_read_poll should be suppressed, but an API change is
    necessary in the character devices to suppress fd_can_read(). */
